{"version":3,"sources":["components/Nota.js","components/NotaList.js","components/NotaEdit.js","components/App.js","index.js"],"names":["Nota","props","useContext","NotaContext","handleNotaDelete","handleNotaSelect","id","name","date","session","notes","className","onClick","NotaList","notas","handleNotaAdd","map","nota","NotaEdit","handleNotaChange","handleChange","changes","undefined","htmlFor","type","value","onInput","e","target","React","createContext","LOCAL_STORAGE_KEY","sampleNotas","App","useState","selectedNotaId","setSelectedNotaId","setNotas","selectedNota","find","console","log","useEffect","notaJSON","localStorage","getItem","JSON","parse","setItem","stringify","notaContextValue","newNota","Date","now","toString","filter","newNotas","index","findIndex","r","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.809934e5.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport { NotaContext } from './App'\r\n\r\nexport default function Nota(props) {\r\n  const { handleNotaDelete, handleNotaSelect } = useContext(NotaContext)\r\n  const {\r\n    id,\r\n    name,\r\n    date,\r\n    session,\r\n    notes\r\n  } = props\r\n  \r\n  return (\r\n    <div className=\"nota\">\r\n      <div className=\"nota__header\"> \r\n        <h3 className=\"nota__title\">{name}</h3>\r\n      </div>\r\n        <div>\r\n        <button\r\n          className=\"btn btn--primary mr-1\"\r\n          onClick={() => handleNotaSelect(id)}\r\n        >\r\n          Edit\r\n        </button>\r\n          <button\r\n            className=\"btn btn--danger\"\r\n            onClick={() => handleNotaDelete(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      <div className=\"nota__row\"> \r\n        <span className=\"nota__label\">Dia:</span>\r\n        <span className=\"nota__value\">{date}</span>\r\n      </div>\r\n      <div className=\"nota__row\"> \r\n        <span className=\"nota__label\">Sesi√≥n:</span>\r\n        <span className=\"nota__value\">{session}</span>\r\n      </div>\r\n      <div className=\"nota__row\"> \r\n        <span className=\"nota__label\">Nota:</span>\r\n        <div className=\"nota__value nota__instructions nota__value--indented\">\r\n          {notes}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport Nota from './Nota'\r\nimport { NotaContext } from './App'\r\n\r\nexport default function NotaList({ notas }) {\r\n  const { handleNotaAdd } = useContext(NotaContext)\r\n\r\n  return (\r\n    <div className=\"nota-list\">\r\n      <div>\r\n        {notas.map(nota => {\r\n          return (\r\n            <Nota key={nota.id} {...nota} />\r\n          )\r\n        })}\r\n      </div>\r\n      <div className=\"nota-list__add-nota-btn-container\">\r\n        <button\r\n          className=\"btn btn--primary\"\r\n          onClick={handleNotaAdd}\r\n        >\r\n          Add Note\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { NotaContext } from './App'\r\n\r\nexport default function NotaEdit({ nota }) {\r\n  const { handleNotaChange, handleNotaSelect } = useContext(NotaContext)\r\n\r\n  function handleChange(changes) {\r\n    handleNotaChange(nota.id, { ...nota, ...changes })\r\n  }\r\n\r\n  return (\r\n    <div className=\"nota-edit\">\r\n      <div className=\"nota-edit__remove-button-container\">\r\n        <button\r\n          className=\"btn nota-edit__remove-button\"\r\n          onClick={()=>handleNotaSelect(undefined)}\r\n        >\r\n          &times;\r\n        </button>\r\n      </div>\r\n      <div className=\"nota-edit__details-grid\">\r\n        <label\r\n          htmlFor=\"name\"\r\n          className=\"nota-edit__label\"\r\n        >\r\n          Name:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          id=\"name\"\r\n          value={nota.name}\r\n          onInput={e => handleChange({ name: e.target.value })}\r\n          className=\"nota-edit__input\"\r\n        />\r\n        <label\r\n          htmlFor=\"date\"\r\n          className=\"nota-edit__label\"\r\n        >\r\n          Date:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"date\"\r\n          id=\"date\"\r\n          value={nota.date}\r\n          onInput={e => handleChange({ date: e.target.value })}\r\n          className=\"nota-edit__input\"\r\n        />\r\n        <label\r\n          htmlFor=\"session\"\r\n          className=\"nota-edit__label\"\r\n        >\r\n          Session:\r\n        </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"session\"\r\n          id=\"session\"\r\n          value={nota.session}\r\n          onInput={e => handleChange({ session: e.target.value })}\r\n          className=\"nota-edit__input\"\r\n        />\r\n        <label\r\n          htmlFor=\"nota\"\r\n          className=\"nota-edit__label\"\r\n        >\r\n          Note:\r\n        </label>\r\n        <textarea\r\n          name=\"nota\"\r\n          id=\"nota\"\r\n          value={nota.notes}\r\n          onInput={e => handleChange({ notes: e.target.value })}\r\n          className=\"nota-edit__input\"\r\n        />\r\n      </div>\r\n      <br />\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport NotaList from \"./NotaList\";\nimport NotaEdit from './NotaEdit'\n\nimport '../css/app.css'\n\nexport const NotaContext = React.createContext()\nconst LOCAL_STORAGE_KEY = 'cookingWithReact.notas'\n\nfunction App() {\n  const [selectedNotaId, setSelectedNotaId] = useState()\n  const [notas, setNotas] = useState(sampleNotas)\n  const selectedNota = notas.find(nota => nota.id === selectedNotaId)\n  console.log(\"mi nota: \" + selectedNota )\n\n  useEffect(() => {\n    const notaJSON = localStorage.getItem(LOCAL_STORAGE_KEY)\n    if (notaJSON != null) setNotas(JSON.parse(notaJSON))\n  },[])\n\n  useEffect(() => {\n    //cada vez que hay un rerender se llama la funcion que esta dentro\n    //de useEffect\n    //el segundo parametro de useEffect es un arreglo: si es vacio hace que\n    //la funcion corra una sola vez (solo la primera vez que corre) si \n    //contiene un arreglo, cada vez que el arreglo cambia: corre la funcion\n    //se pueden pasar arreglos, variables al mismo tiempo: ej, [casas, silla]\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(notas))\n  }, [notas])\n\n/*   useEffect(() => {\n        //si usamos un return dentro de useEffect. Cada vez que un componente\n        //se desmonta (unmount) llama la seccion return de los useEffect\n      console.log(\"Rendering\")\n      return () => {\n      console.log(\"Desmontando\")\n    }\n  })\n */\n  const notaContextValue = {\n    handleNotaAdd,\n    handleNotaDelete,\n    handleNotaSelect,\n    handleNotaChange\n  }\n\n  function handleNotaSelect(id) {\n    setSelectedNotaId(id)\n  }\n\n  function handleNotaAdd() {\n    const newNota = {\n      id: Date.now().toString(),\n      name: '',\n      date: '',\n      session: '',\n      notes: ''\n    }\n    setSelectedNotaId(newNota.id)\n    setNotas([...notas, newNota])\n  }\n\n  function handleNotaChange(id, nota) {\n    const newNotas = [...notas]\n    const index = newNotas.findIndex(r => r.id === id)\n    newNotas[index] = nota\n    setNotas(newNotas)\n  }\n\n  function handleNotaDelete(id) {\n    setNotas(notas.filter(nota => nota.id !== id))\n  }\n\n  return (\n    <NotaContext.Provider value={notaContextValue}>\n      <NotaList notas={notas} />\n      {selectedNota && <NotaEdit nota={selectedNota} />}\n    </NotaContext.Provider>\n  )\n\n\n}\n\n\nconst sampleNotas = [\n  {\n    id: 1,\n    name: 'Tarea',\n    date: '08/23/2021',\n    session: 'ma√±ana',\n    notes: '1. Lavar la ropa\\n2. Secar la ropa\\n3. Guardar la ropa'\n  },\n  {\n    id: 2,\n    name: 'Recordatorio',\n    date: '08/24/2021',\n    session: 'noche',\n    notes: '1. Llamar a Pedro\\n2. Terminar la tarea de la escuela'\n  }\n]\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}